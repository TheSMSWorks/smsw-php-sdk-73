<?php
/**
 * MessageResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The SMS Works API
 *
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.
 *
 * The version of the OpenAPI document: 1.10.0
 * Contact: support@thesmsworks.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MessageResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MessageResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MessageResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'batchid' => 'string',
        'content' => 'string',
        'created' => 'string',
        'customerid' => 'string',
        'deliveryreporturl' => 'string',
        'destination' => 'float',
        'failurereason' => '\OpenAPI\Client\Model\MessageResponseFailurereason',
        'id' => 'string',
        'identifier' => 'string',
        'keyword' => 'string',
        'messageid' => 'string',
        'modified' => 'string',
        'schedule' => 'string',
        'status' => 'string',
        'sender' => 'string',
        'tag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'batchid' => null,
        'content' => null,
        'created' => null,
        'customerid' => null,
        'deliveryreporturl' => null,
        'destination' => null,
        'failurereason' => null,
        'id' => null,
        'identifier' => null,
        'keyword' => null,
        'messageid' => null,
        'modified' => null,
        'schedule' => null,
        'status' => null,
        'sender' => null,
        'tag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'batchid' => 'batchid',
        'content' => 'content',
        'created' => 'created',
        'customerid' => 'customerid',
        'deliveryreporturl' => 'deliveryreporturl',
        'destination' => 'destination',
        'failurereason' => 'failurereason',
        'id' => 'id',
        'identifier' => 'identifier',
        'keyword' => 'keyword',
        'messageid' => 'messageid',
        'modified' => 'modified',
        'schedule' => 'schedule',
        'status' => 'status',
        'sender' => 'sender',
        'tag' => 'tag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'batchid' => 'setBatchid',
        'content' => 'setContent',
        'created' => 'setCreated',
        'customerid' => 'setCustomerid',
        'deliveryreporturl' => 'setDeliveryreporturl',
        'destination' => 'setDestination',
        'failurereason' => 'setFailurereason',
        'id' => 'setId',
        'identifier' => 'setIdentifier',
        'keyword' => 'setKeyword',
        'messageid' => 'setMessageid',
        'modified' => 'setModified',
        'schedule' => 'setSchedule',
        'status' => 'setStatus',
        'sender' => 'setSender',
        'tag' => 'setTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'batchid' => 'getBatchid',
        'content' => 'getContent',
        'created' => 'getCreated',
        'customerid' => 'getCustomerid',
        'deliveryreporturl' => 'getDeliveryreporturl',
        'destination' => 'getDestination',
        'failurereason' => 'getFailurereason',
        'id' => 'getId',
        'identifier' => 'getIdentifier',
        'keyword' => 'getKeyword',
        'messageid' => 'getMessageid',
        'modified' => 'getModified',
        'schedule' => 'getSchedule',
        'status' => 'getStatus',
        'sender' => 'getSender',
        'tag' => 'getTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['batchid'] = $data['batchid'] ?? null;
        $this->container['content'] = $data['content'] ?? null;
        $this->container['created'] = $data['created'] ?? null;
        $this->container['customerid'] = $data['customerid'] ?? null;
        $this->container['deliveryreporturl'] = $data['deliveryreporturl'] ?? null;
        $this->container['destination'] = $data['destination'] ?? null;
        $this->container['failurereason'] = $data['failurereason'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['identifier'] = $data['identifier'] ?? null;
        $this->container['keyword'] = $data['keyword'] ?? null;
        $this->container['messageid'] = $data['messageid'] ?? null;
        $this->container['modified'] = $data['modified'] ?? null;
        $this->container['schedule'] = $data['schedule'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['sender'] = $data['sender'] ?? null;
        $this->container['tag'] = $data['tag'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['content'] === null) {
            $invalidProperties[] = "'content' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['customerid'] === null) {
            $invalidProperties[] = "'customerid' can't be null";
        }
        if ($this->container['destination'] === null) {
            $invalidProperties[] = "'destination' can't be null";
        }
        if ($this->container['messageid'] === null) {
            $invalidProperties[] = "'messageid' can't be null";
        }
        if ($this->container['modified'] === null) {
            $invalidProperties[] = "'modified' can't be null";
        }
        if ($this->container['schedule'] === null) {
            $invalidProperties[] = "'schedule' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['tag'] === null) {
            $invalidProperties[] = "'tag' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets batchid
     *
     * @return string|null
     */
    public function getBatchid()
    {
        return $this->container['batchid'];
    }

    /**
     * Sets batchid
     *
     * @param string|null $batchid batchid
     *
     * @return self
     */
    public function setBatchid($batchid)
    {
        $this->container['batchid'] = $batchid;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content content
     *
     * @return self
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets customerid
     *
     * @return string
     */
    public function getCustomerid()
    {
        return $this->container['customerid'];
    }

    /**
     * Sets customerid
     *
     * @param string $customerid customerid
     *
     * @return self
     */
    public function setCustomerid($customerid)
    {
        $this->container['customerid'] = $customerid;

        return $this;
    }

    /**
     * Gets deliveryreporturl
     *
     * @return string|null
     */
    public function getDeliveryreporturl()
    {
        return $this->container['deliveryreporturl'];
    }

    /**
     * Sets deliveryreporturl
     *
     * @param string|null $deliveryreporturl deliveryreporturl
     *
     * @return self
     */
    public function setDeliveryreporturl($deliveryreporturl)
    {
        $this->container['deliveryreporturl'] = $deliveryreporturl;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return float
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param float $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets failurereason
     *
     * @return \OpenAPI\Client\Model\MessageResponseFailurereason|null
     */
    public function getFailurereason()
    {
        return $this->container['failurereason'];
    }

    /**
     * Sets failurereason
     *
     * @param \OpenAPI\Client\Model\MessageResponseFailurereason|null $failurereason failurereason
     *
     * @return self
     */
    public function setFailurereason($failurereason)
    {
        $this->container['failurereason'] = $failurereason;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string|null $identifier identifier
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets keyword
     *
     * @return string|null
     */
    public function getKeyword()
    {
        return $this->container['keyword'];
    }

    /**
     * Sets keyword
     *
     * @param string|null $keyword keyword
     *
     * @return self
     */
    public function setKeyword($keyword)
    {
        $this->container['keyword'] = $keyword;

        return $this;
    }

    /**
     * Gets messageid
     *
     * @return string
     */
    public function getMessageid()
    {
        return $this->container['messageid'];
    }

    /**
     * Sets messageid
     *
     * @param string $messageid messageid
     *
     * @return self
     */
    public function setMessageid($messageid)
    {
        $this->container['messageid'] = $messageid;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return string
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param string $modified modified
     *
     * @return self
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return string
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param string $schedule schedule
     *
     * @return self
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string $tag tag
     *
     * @return self
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


